import Head from 'next/head';
import React, { useState, useEffect } from 'react';
import {
  useUser,
  SignedIn,
  SignedOut,
  SignInButton,
  UserButton,
  SignOutButton
} from "@clerk/nextjs";
import toast, { Toaster } from 'react-hot-toast';


import type { GetStaticProps } from 'next';
import { Inter } from 'next/font/google';

const inter = Inter({ subsets: ['latin'] });

// pages/index.tsx
import prisma from '../lib/prisma';

export default function Home(props: { events: any[] }) {
  const { isLoaded, isSignedIn, user } = useUser();
  const [form, setForm] = useState({
    eventName: '',
    eventDescription: '',
    eventLocation: '',
  });

  if (!isLoaded) {
    return null;
  }

  const handleSubmit = async (e: React.FormEvent<HTMLFormElement>) => {
    e.preventDefault();
    toast.loading('Creating event...');

    const formData = {
      form,
      userEmail: user?.primaryEmailAddress?.emailAddress
    }

    const res = await fetch('/api/createEvent', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        formData
      }),
    });

    const result = await res.json();

    if (result.error) {
      toast.error(result.error);
      return;
    }

    toast.success('Event created successfully');
  };

  return (
    <>
      <Head>
        <title>Visualise Event Feedbacks</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className='flex flex-col text-slate-100 h-screen'>
        <Toaster />
        <div className='p-4 m-2 border-2 border-white rounded-md flex justify-between'>
          <h1 className='text-4xl font-bold'>Ebento</h1>
          <div className='flex flex-row mx-2 items-center'>
            <SignedIn>
              {
                !!user && <p className='text-lg mx-2'>{user.fullName}</p>
              }
              <UserButton />
              <div className='ml-4 bg-slate-800 px-2 py-1 rounded-md'>
                <SignOutButton />
              </div>
            </SignedIn>
            <SignedOut>
              {/* Signed out users get sign in button */}
              <SignInButton />
            </SignedOut>
          </div>
        </div>



        <SignedIn>
          <div className='flex gap-x-16 m-12 h-full'>
            <div className='flex w-2/3 flex-col'>
              <h1 className='text-3xl font-bold'>Your Past Events</h1>

              <div className='flex mt-2 bg-slate-800 p-4 flex-wrap rounded-md h-[70vh] overflow-y-scroll'>
                {
                  props.events.map((event) => {
                    return (
                      <div key={event} className='flex flex-row rounded-md justify-between items-center w-full h-40 p-2 m-4 border-2 border-white'>
                        <div className='flex flex-col'>
                          <h1 className='text-xl font-bold'>{event.name}</h1>
                          <p className='text-lg'>{event.description}</p>
                          <p className='text-lg'>{event.date}</p>
                        </div>
                        <div className='flex flex-col'>
                          <button className='p-2 m-2 hover:scale-105 transition-all outline-none bg-transparent border'>View Feedbacks</button>
                          <button className='p-2 m-2 hover:scale-105 transition-all outline-none bg-transparent border'>Delete Event</button>
                        </div>
                      </div>
                    )
                  })
                }
              </div>
            </div>

            <div className='flex flex-col w-1/2'>
              <h1 className='text-3xl font-bold'>Create an Event</h1>
              <form className='flex flex-col  mt-4 w-3/4'
                onSubmit={handleSubmit}
              >
                <input type='text' value={form.eventName}
                  onChange={(e) => setForm({ ...form, eventName: e.target.value })}
                  placeholder='Event Name' className='p-3 m-2 outline-none bg-transparent border w-full rounded-md' />

                <input type='text' value={form.eventDescription}
                  onChange={(e) => setForm({ ...form, eventDescription: e.target.value })}
                  placeholder='Event Description' className='p-3 m-2 outline-none bg-transparent border w-full rounded-md' />

                <input type='text' value={form.eventLocation}
                  onChange={(e) => setForm({ ...form, eventLocation: e.target.value })}
                  placeholder='Event Location' className='p-3 m-2 outline-none bg-transparent border w-full rounded-md' />

                <button className='p-2 m-2 hover:scale-105 transition-all outline-none bg-transparent border w-full rounded-md grow'>Create Event</button>
              </form>
            </div>
          </div>
        </SignedIn>

        <SignedOut>
          <div className='flex flex-col items-center justify-center h-full'>
            <h1 className='text-3xl font-bold'>Visualize event feedbacks</h1>
            <p className='text-lg'>Sign in to get started</p>
          </div>
        </SignedOut>
      </main>
    </>
  )
}

export const getStaticProps: GetStaticProps = async () => {
  const events = await prisma.event.findMany();
  return {
    props: { events: JSON.parse(JSON.stringify(events)) },
    revalidate: 10,
  };
};
